import { Rectangle } from "@pixi/core";
Rectangle.prototype.containsRect = function(other) {
  return other.width <= 0 || other.height <= 0 ? other.x > this.x && other.y > this.y && other.right < this.right && other.bottom < this.bottom : other.x >= this.x && other.y >= this.y && other.right <= this.right && other.bottom <= this.bottom;
};
Rectangle.prototype.equals = function(other) {
  return other === this ? !0 : other && this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
};
Rectangle.prototype.intersection = function(other, outRect) {
  outRect || (outRect = new Rectangle());
  const x0 = this.x < other.x ? other.x : this.x, x1 = this.right > other.right ? other.right : this.right;
  if (x1 <= x0)
    return outRect.x = outRect.y = outRect.width = outRect.height = 0, outRect;
  const y0 = this.y < other.y ? other.y : this.y, y1 = this.bottom > other.bottom ? other.bottom : this.bottom;
  return y1 <= y0 ? (outRect.x = outRect.y = outRect.width = outRect.height = 0, outRect) : (outRect.x = x0, outRect.y = y0, outRect.width = x1 - x0, outRect.height = y1 - y0, outRect);
};
Rectangle.prototype.union = function(other, outRect) {
  outRect || (outRect = new Rectangle());
  const x1 = Math.min(this.x, other.x), x2 = Math.max(this.x + this.width, other.x + other.width), y1 = Math.min(this.y, other.y), y2 = Math.max(this.y + this.height, other.y + other.height);
  return outRect.x = x1, outRect.y = y1, outRect.width = x2 - x1, outRect.height = y2 - y1, outRect;
};
//# sourceMappingURL=rectangleExtras.mjs.map
